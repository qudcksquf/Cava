package playable;

import java.awt.Image;


import java.awt.event.KeyEvent;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

import main.Music;
import mapinfo.Maps;
import playable.component.*;

public class Car {
	private Engine engine;
	private Tire tire;
	private int x;
	private int y;
	private Maps map = new Maps();

	private Image image;

	private Status status;
	private Inventory inventory;
	
	public Car() {
		x = 2;
		y = 2;
		engine = new BasicEngine();
		tire = new Tire();
		image = new ImageIcon("Image/" + "car_right(normal).png").getImage();
		status = new Status();
		inventory = new Inventory();
	}

	public void setImage(Image image) {
		this.image = image;
	}

	public Image getImage() {
		return image;
	}

	public void setX(int x) {
		this.x = x;
	}

	public Integer getX() {
		return x;
	}

	public void setY(int y) {
		this.y = y;
	}

	public Integer getY() {
		return y;
	}

	public Engine getEngine() {
		return engine;
	}

	public void setEngine(Engine engine) {
		this.engine = engine;
	}

	public Tire getTire() {
		return tire;
	}

	public void setTire(Tire tire) {
		this.tire = tire;
	}

	public void move() {
		
		engine.boostDelayDown(status);
		engine.boostCountDown();
		if(engine instanceof VantageEngine)
			((VantageEngine)engine).skillDelayDown(status);
		else if(engine instanceof AdvancedEngine)
			((AdvancedEngine)engine).skillDelayDown(status);
		
		tire.trapDown();
		
		// Inventory Label setting
		inventory.getSpeedLabel().setText(Integer.toString(engine.getSpeed()));
		inventory.getConfuseLabel().setVisible(tire.isTrapped());
		if(engine.isBooster())
			inventory.getBoosterLabel().setText("On");
		else
			inventory.getBoosterLabel().setText("Off");
		
		if (engine.getMove()) {
			Music.drive(engine.isMoving());
			int nextX = x + tire.getDx();
			int nextY = y + tire.getDy();
			int tileNumber = map.getTile()[nextY][nextX];

			// When the car meets wall
			if (tileNumber == 1)
				return;

			// meets wizard
			if (tileNumber == 6) {
				if (map.getStage() != 2) {
					// whether the player change the engine
					boolean equipped = false;
					if (map.getStage() == 0 && engine instanceof VantageEngine)
						equipped = true;
					if (map.getStage() == 1 && engine instanceof AdvancedEngine)
						equipped = true;

					Music.drive(false);
					// when the player don't change the engine
					if (equipped == false && engine.isMoving() == true) {
						JOptionPane.showMessageDialog(null,
								"You should change your old engine to new one. Then I will move you to the next stage.\n"
										+ "The engine you have is not enough to clear the next stage.",
								"Wizard", JOptionPane.WARNING_MESSAGE);
					}
					engine.setMoving(false);
				}
			}

			int currentOilGauge = status.getOilgauge().getValue();
			int currentHP = status.getHp().getValue();
			// meets oil
			if (tileNumber == 8) {
				Music.oil();
				if (currentOilGauge + 120 >= status.getOilgauge().getMaximum())
					status.getOilgauge().setValue(status.getOilgauge().getMaximum());
				else
					status.getOilgauge().setValue(currentOilGauge + 120);
				map.getTile()[nextY][nextX] = 0;
			}

			// meets kit
			else if (tileNumber == 9) {
				Music.kit();
				if (currentHP + 50 >= status.getHp().getMaximum())
					status.getHp().setValue(status.getHp().getMaximum());
				else
					status.getHp().setValue(currentHP + 50);
				map.getTile()[nextY][nextX] = 0;
			}

			// meets trap
			else if (tileNumber == 10) {
				if (currentHP - 30 <= 0) {
					JOptionPane.showMessageDialog(null, "Car is broken!", "Game Over", JOptionPane.WARNING_MESSAGE);
					System.exit(0);
				} else
					status.getHp().setValue(currentHP - 30);

				tire.hasTrap();
			}
			
			
			// When the car meets carcenter
			if (tileNumber == 11) {
				Engine storedEngine = inventory.getStoredEngine();
				if (storedEngine != null) {
					Music.drive(false);
					Music.carcenterZero();
					JOptionPane.showMessageDialog(null, "Oh, you got new one. I will take the old one!",
							"Garbage Collector", JOptionPane.YES_OPTION);
					engine = storedEngine;
					inventory.getEquippedLabel().setText(engine.getClass().getSimpleName());
					
					inventory.setStoredEngine(null);
					inventory.getStoredLabel().setText("Empty");
					if (storedEngine instanceof VantageEngine){
						// skill이 생김
						status.getSkillDelay().setVisible(true);
						status.getLblSkillDelay().setVisible(true);
						status.getSkillDelay().setMaximum(3000);
						status.getDelayPB().setMaximum(900);
					}
					else if (storedEngine instanceof AdvancedEngine){
						status.getSkillDelay().setMaximum(2000);
						status.getDelayPB().setMaximum(800);
					}
					status.getSkillDelay().setValue(0);
					status.getDelayPB().setValue(0);
					status.getOilgauge().setValue(status.getOilgauge().getMaximum());

					Music.drive(engine.isMoving());
				} else {
					if (status.getHp().getValue() != status.getHp().getMaximum()) {
						Music.carcenterOne();
						Music.drive(false);
						JOptionPane.showMessageDialog(null, "God bless you!", "Garbage Collector",
								JOptionPane.YES_OPTION);
						Music.drive(engine.isMoving());
						engine.setMoving(false);
					}
				}
				status.getHp().setValue(status.getHp().getMaximum());
			}
			
			currentOilGauge = status.getOilgauge().getValue();
			// When oilgauge is 0, game over
			if (currentOilGauge - engine.getUseOil() <= 0) {
				JOptionPane.showMessageDialog(null, "The oil has run out!", "Game Over", JOptionPane.WARNING_MESSAGE);
				System.exit(0);
			}
			status.getOilgauge().setValue(currentOilGauge - engine.getUseOil());
			

			// meets item (engine)
			if (tileNumber == 7) {
				int stage = map.getStage();
				Music.getItem();
				if (stage == 0) {
					inventory.setStoredEngine(new VantageEngine());
					inventory.getStoredLabel().setText("VantageEngine");
				} else if (stage == 1) {
					inventory.setStoredEngine(new AdvancedEngine());
					inventory.getStoredLabel().setText("AdvancedEngine");
				}
				map.getTile()[nextY][nextX] = 0;
			}

			x += tire.getDx();
			y += tire.getDy();
		}
		else  {
			Music.drive(engine.isMoving());
		}
	}

	public void keyReleased(KeyEvent e) {
		int key = e.getKeyCode();
		if (key == KeyEvent.VK_SPACE) {
			engine.setMoving(false);
		}
	}

	public void keyPressed(KeyEvent e) {
		int key = e.getKeyCode();

		if (key == KeyEvent.VK_UP) {
			tire.setDx(0);
			tire.setDy(tire.isTrapped() ? 1 : -1);
		}
		if (key == KeyEvent.VK_DOWN) {
			tire.setDx(0);
			tire.setDy(tire.isTrapped() ? -1 : 1);
		}
		if (key == KeyEvent.VK_LEFT) {
			tire.setDx(tire.isTrapped() ? 1 : -1);
			tire.setDy(0);
		}
		if (key == KeyEvent.VK_RIGHT) {
			tire.setDx(tire.isTrapped() ? -1 : 1);
			tire.setDy(0);
		}
		if (key == KeyEvent.VK_SPACE) {
			engine.setMoving(true);
		}
		if (key == KeyEvent.VK_CONTROL) {
			engine.hasBooster(status);
		}
		if (key == KeyEvent.VK_Z) {
			if(engine instanceof VantageEngine) {
				((VantageEngine)engine).hasSkill(status);
			}
			else if(engine instanceof AdvancedEngine) {
				((AdvancedEngine)engine).hasSkill(status, tire);
			}
		}
	}

	public Maps getMap() {
		return map;
	}

	public void setMap(Maps map) {
		this.map = map;
	}

	public Status getStatus() {
		return status;
	}

	public void setStatus(Status status) {
		this.status = status;
	}

	public Inventory getInventory() {
		return inventory;
	}

	public void setInventory(Inventory inventory) {
		this.inventory = inventory;
	}
}